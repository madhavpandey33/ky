# This workflow will unpublish a specific version from npm registry with safety checks and confirmations
# For more information see: https://docs.npmjs.com/unpublishing-packages-from-the-registry

name: NPM Unpublish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to unpublish (e.g., 1.1.1)'
        required: true
        type: string
      new_latest_version:
        description: 'Version to set as new "latest" tag (e.g., 1.1.0)'
        required: true
        type: string
      confirm:
        description: 'Type "CONFIRM" to proceed with unpublishing'
        required: true
        type: string

jobs:
  unpublish:

    runs-on: ubuntu-latest
    if: "github.event.inputs.confirm == 'CONFIRM'"
    
    steps:
    - uses: actions/checkout@v2
    - name: Validate confirmation input
      run: |-
        if [ "${{ github.event.inputs.confirm }}" != "CONFIRM" ]; then
          echo "❌ Confirmation not provided. You must type 'CONFIRM' to proceed."
          exit 1
        fi
        echo "✅ Confirmation received"
    - name: Setup Node.js environment
      uses: actions/setup-node@v1
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    - name: Verify package exists
      run: |-
        VERSION="${{ github.event.inputs.version }}"
        PACKAGE_NAME="@mad_devx/ky"
        
        echo "🔍 Checking if package ${PACKAGE_NAME}@${VERSION} exists..."
        
        if npm view "${PACKAGE_NAME}@${VERSION}" version 2>/dev/null; then
          echo "✅ Package ${PACKAGE_NAME}@${VERSION} found"
        else
          echo "❌ Package ${PACKAGE_NAME}@${VERSION} not found"
          exit 1
        fi
    - name: Validate new latest version exists
      run: |-
        NEW_LATEST="${{ github.event.inputs.new_latest_version }}"
        PACKAGE_NAME="@mad_devx/ky"
        
        echo "🔍 Checking if new latest version ${PACKAGE_NAME}@${NEW_LATEST} exists..."
        
        if npm view "${PACKAGE_NAME}@${NEW_LATEST}" version 2>/dev/null; then
          echo "✅ Package ${PACKAGE_NAME}@${NEW_LATEST} found and will be set as latest"
        else
          echo "❌ Package ${PACKAGE_NAME}@${NEW_LATEST} not found - cannot set as latest"
          exit 1
        fi
    - name: Display unpublish details
      run: |-
        echo "📦 Package: @mad_devx/ky"
        echo "🏷️  Version to unpublish: ${{ github.event.inputs.version }}"
        echo "🆕 New latest version: ${{ github.event.inputs.new_latest_version }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "⏰ Timestamp: $(date -u)"
        echo "⚠️  WARNING: This action is permanent and irreversible!"
    - run: npm unpublish @mad_devx/ky@${{ github.event.inputs.version }} --force
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: Verify unpublish success
      run: |-
        VERSION="${{ github.event.inputs.version }}"
        PACKAGE_NAME="@mad_devx/ky"
        
        echo "🔍 Verifying unpublish..."
        echo "⏳ Waiting for npm registry to propagate changes..."
        
        # Wait a bit for npm registry to update
        sleep 10
        
        # Try verification with retry logic
        for i in {1..5}; do
          echo "Verification attempt $i/5..."
          
          if npm view "${PACKAGE_NAME}@${VERSION}" version 2>/dev/null; then
            if [ $i -eq 5 ]; then
              echo "⚠️  Package ${PACKAGE_NAME}@${VERSION} may still be cached in npm registry"
              echo "✅ Unpublish command executed successfully, but registry may need time to propagate"
              echo "💡 Try checking manually in a few minutes: npm view ${PACKAGE_NAME}@${VERSION}"
              break
            else
              echo "Still visible, waiting 15 seconds before retry..."
              sleep 15
            fi
          else
            echo "✅ Confirmed: ${PACKAGE_NAME}@${VERSION} has been unpublished"
            break
          fi
        done
    - name: Set new latest tag
      run: |-
        NEW_LATEST="${{ github.event.inputs.new_latest_version }}"
        PACKAGE_NAME="@mad_devx/ky"
        
        echo "🏷️  Setting ${PACKAGE_NAME}@${NEW_LATEST} as latest..."
        
        npm dist-tag add "${PACKAGE_NAME}@${NEW_LATEST}" latest
        
        echo "✅ Successfully set ${PACKAGE_NAME}@${NEW_LATEST} as latest"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: Verify latest tag
      run: |-
        PACKAGE_NAME="@mad_devx/ky"
        
        echo "🔍 Verifying latest tag..."
        CURRENT_LATEST=$(npm view "${PACKAGE_NAME}" dist-tags.latest)
        echo "Current latest version: ${CURRENT_LATEST}"
        
        if [ "${CURRENT_LATEST}" = "${{ github.event.inputs.new_latest_version }}" ]; then
          echo "✅ Latest tag successfully updated to ${{ github.event.inputs.new_latest_version }}"
        else
          echo "⚠️  Latest tag might not have updated yet (registry propagation)"
        fi

  post-unpublish:
    runs-on: ubuntu-latest
    needs: [unpublish]
    if: "github.event.inputs.confirm == 'CONFIRM'"
    
    steps:
    - uses: actions/checkout@v2
    - name: Post unpublish summary
      run: |-
        echo "## 📋 Unpublish Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: @mad_devx/ky" >> $GITHUB_STEP_SUMMARY
        echo "- **Unpublished Version**: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Latest Version**: ${{ github.event.inputs.new_latest_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Successfully unpublished and latest tag updated" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **Important**: This action cannot be undone. The version has been permanently removed from npm." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor dependent projects for potential issues" >> $GITHUB_STEP_SUMMARY
        echo "- Consider publishing a fixed version if needed" >> $GITHUB_STEP_SUMMARY
        echo "- Update documentation if necessary" >> $GITHUB_STEP_SUMMARY
